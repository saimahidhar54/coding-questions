Problem statement
Given an undirected graph G(V,E), check if the graph G is connected graph or not.

Note:

1. V is the number of vertices present in graph G and vertices are numbered from 0 to V-1. 
2. E is the number of edges present in graph G.
Detailed explanation ( Input/output format, Notes, Images )
Constraints :
0 <= V <= 1000
0 <= E <= (V * (V - 1)) / 2
0 <= a <= V - 1
0 <= b <= V - 1
Time Limit: 1 second
Sample Input 1:
4 4
0 1
0 3
1 2
2 3
Sample Output 1:
true
Sample Input 2:
4 3
0 1
1 3 
0 3
Sample Output 2:
false 
Sample Output 2 Explanation
The graph is not connected, even though vertices 0,1 and 3 are connected to each other but there isnâ€™t any path from vertices 0,1,3 to vertex 2. 



#include <iostream>
using namespace std;
void dfshelp(int arr[1000][1000],int visited[1000],int v,int s)
{
    visited[s]=1;
    for(int i=0;i<v;i++)
    {
        if(visited[i]==0 && arr[s][i]==1)
        {
            dfshelp(arr,visited,v,i);
        }
    }
}
bool dfs(int arr[1000][1000],int visited[1000],int v)
{
    dfshelp(arr,visited,v,0);
    for(int i=0;i<v;i++)
    {
        if(visited[i]==0)
        {
            return false;
        }
    }
    return true;
}
int main() {
    // Write your code here
    int v,e,j,k;
    cin >> v>>e;
    int arr[1000][1000]={0};
    for(int t=0;t<e;t++)
    {
        cin >> j>>k;
        arr[j][k]=1;
        arr[k][j]=1;
    }
    int visited[1000]={0};
    if(dfs(arr,visited,v))
    {
        cout << "true";
    }
    else
    {
        cout << "false";
    }
}
