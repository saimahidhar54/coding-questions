Problem statement
Given an undirected and disconnected graph G(V, E), print its BFS traversal.

Note:

1. Here you need to consider that you need to print BFS path starting from vertex 0 only. 
2. V is the number of vertices present in graph G and vertices are numbered from 0 to V-1. 
3. E is the number of edges present in graph G.
4. Take graph input in the adjacency matrix.
5. Handle for Disconnected Graphs as well
Detailed explanation ( Input/output format, Notes, Images )
Constraints :
0 <= V <= 1000
0 <= E <= (V * (V - 1)) / 2
0 <= a <= V - 1
0 <= b <= V - 1
Time Limit: 1 second
Sample Input 1:
4 4
0 1
0 3
1 2
2 3
Sample Output 1:
0 1 3 2


#include <iostream>
#include <queue>
using namespace std;
void bfs(int **adm,int *visited,queue<int> q,int v)
{
    if(v!=0)
    {
    q.push(0);
    visited[0]=1;
    while(!q.empty())
    {
        int w=q.front();
        q.pop();
        cout << w<<" ";
        // visited[w]=1;
        for(int i=0;i<v;i++)
        {
            if(i==w)
            {
                continue;
            }
            if(adm[w][i]==1)
            {
              if (visited[i] == 0) {
                q.push(i);
                visited[i] = 1;
              }
            }
        }
    }
    for(int i=0;i<v;i++)
    {
      if (visited[i] == 0) {
        q.push(i);
        while (!q.empty()) {
          int w = q.front();
          q.pop();
          cout << w << " ";
          visited[w] = 1;
          for (int i = 0; i < v; i++) {
            if (i == w) {
              continue;
            }
            if (adm[w][i] == 1) {
              if (visited[i] == 0) {
                q.push(i);
                visited[i] = 1;
              }
            }
          }
        }
      }
    }
    }
}
int main() {
    // Write your code here
    int v,e,j,k;
    cin >> v>> e;
    int **adm=new int*[v];
    for(int i=0;i<v;i++)
    {
        adm[i]=new int[v];
        for(int j=0;j<v;j++)
        {
            adm[i][j]=0;

        }
    }

    for(int i=0;i<e;i++)
    {
        cin >> j >> k;
        adm[j][k]=1;
        adm[k][j]=1;
    }
    int *visited=new int[v];
    for(int i=0;i<v;i++)
    {
        visited[i]=0;
    }
    queue <int> q;
    bfs(adm,visited,q,v);
}
