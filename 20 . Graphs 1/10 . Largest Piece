Problem statement
It's Gary's birthday today and he has ordered his favourite square cake consisting of '0's and '1's . But Gary wants the biggest piece of '1's and no '0's . A piece of cake is defined as a part which consist of only '1's, and all '1's share an edge with each other on the cake. Given the size of cake N and the cake, can you find the count of '1's in the biggest piece of '1's for Gary ?

Detailed explanation ( Input/output format, Notes, Images )
Constraints :
1 <= N <= 1000
Time Limit: 1 sec
Sample Input 1:
2
1 1
0 1
Sample Output 1:
3



bool validpoint(int i,int j,int n)
{
    if(i>=0 && j>=0 && i<n && j< n)
    {
        return true;
    }
    else
    {
        return false;
    }
}
int piece(vector<vector<int>> &cake,int n,int i,int j)
{
   // cout << " "<<i<<" "<< j<< " "<<endl;
    //g+=1;
    cake[i][j]=0;
    int a=0;
   // vector<vector<int>> cr={{0,1},{0,-1},{1,0},{-1,0}};
    if(i>0 && cake[i-1][j]==1)
    {
        a+=piece(cake,n,i-1,j);
    }
    if(j>0 && cake[i][j-1]==1)
    {
        a+=piece(cake,n,i,j-1);
    }
    if(i<(n-1) && cake[i+1][j]==1)
    {
        a+=piece(cake,n,i+1,j);
    }
    if(j<(n-1) && cake[i][j+1]==1)
    {
        a+=piece(cake,n,i,j+1);
    }
    return 1+a;
}
int getBiggestPieceSize(vector<vector<int>> &cake, int n) {
    // Write your code here
   // int visited[1000][1000]={0};
  /* int **visited=new int*[n];
   for(int i=0;i<n;i+=1)
   {
       visited[i]=new int[n];
       for(int j=0;j<n;j+=1)
       {
           visited[i][j]=0;
       }
   }
   */
    int area=0;
    for(int i=0;i<n;i+=1)
    {
        for(int j=0;j<n;j+=1)
        {
            if(cake[i][j]==1)
            {
                
                int g = piece(cake,n,i,j);
                //cout <<"g:"<< g<<" "<< endl;
                area=max(g,area);
            }
        }
    }
    return area;

}
