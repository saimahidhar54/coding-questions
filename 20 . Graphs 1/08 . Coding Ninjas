Problem statement
Given a NxM matrix containing Uppercase English Alphabets only. Your task is to tell if there is a path in the given matrix which makes the sentence “CODINGNINJA” .

There is a path from any cell to all its neighbouring cells. For a particular cell, neighbouring cells are those cells that share an edge or a corner with the cell.

Detailed explanation ( Input/output format, Notes, Images )
Constraints :
1 <= N <= 1000
1 <= M <= 1000
Time Limit: 1 second
Sample Input 1:
2 11
CXDXNXNXNXA
XOXIXGXIXJX
Sample Output 1:
1
Sample Input 2:
5 5
DANDO
NNINJ
AXGJC
INJAA
CODDI
Sample Output 2:
0



bool haspath(vector<vector<char>> &board,int n,int m,int visited[1000][1000],string s,int i,int j)
{
  //cout << 87;
    visited[i][j]=1;
    if(s.length()==1)
    {
        return true;
    }
    int left=j-1;
    int right=j+1;
    int up=i-1;
    int down=i+1;
    if(left!=-1 &&up!=-1)
    {
        if(board[up][left]==s[1] && visited[up][left]==0)
        {
            if (haspath(board,n,m,visited,s.substr(1),up,left))
            {
              return true;
            }
        }
    }
    if(left !=-1 && board[i][left]==s[1] && visited[i][left]==0)
    {
      if(haspath(board, n, m, visited, s.substr(1), i,left))
      {
        return true;
      }
    }
    if(left!=-1 && down !=n && board[down][left]==s[1] && visited[down][left]==0)
    {
      if(haspath(board, n, m, visited, s.substr(1), down, left))
      {
        return true;
      }
    }
    if(up !=-1 && board[up][j]==s[1] && visited[up][j]==0)
    {
      if(haspath(board, n, m, visited, s.substr(1), up,j))
      {
        return true;
      }
    }
    if(down!=n && board[down][j]==s[1] && visited[down][j]==0)
    {
      if(haspath(board, n, m, visited, s.substr(1), down,j))
      {
        return true;
      }
    }
    if(up!=-1 && right!=m && board[up][right]==s[1] && visited[up][right]==0)
    {
      if(haspath(board, n, m, visited, s.substr(1), up,right))
      {
        return true;
      }
    }
    if(right!=m && board[i][right]==s[1] && visited[i][right]==0)
    {
      if(haspath(board, n, m, visited, s.substr(1), i,right))
      {
        return true;
      }
    }
    if(right!=m && down !=n && board[down][right]==s[1]&& visited[down][right]==0)
    {
    if(haspath(board, n, m, visited, s.substr(1), down,right))
    {
      return true;
    }
    }
    visited[i][j]=0;
    return false;

}
bool hasPath(vector<vector<char>> &board, int n, int m) {
    // Write your code here.
    string s="CODINGNINJA";
    int visited[1000][1000]={0};
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<m;j++)
        {
            if(board[i][j]=='C' && haspath(board,n,m,visited,s,i,j)==true)
            {
                return true;
            }
        }
    }
     //haspath(board,n,m,visited,s);
     return false;
}
