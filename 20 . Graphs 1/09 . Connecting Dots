Problem statement
Gary has a board of size NxM. Each cell in the board is a coloured dot. There exist only 26 colours denoted by uppercase Latin characters (i.e. A,B,...,Z). Now Gary is getting bored and wants to play a game. The key of this game is to find a cycle that contain dots of same colour. Formally, we call a sequence of dots d1, d2, ..., dk a cycle if and only if it meets the following condition:

1. These k dots are different: if i ≠ j then di is different from dj.
2. k is at least 4.
3. All dots belong to the same colour.
4. For all 1 ≤ i ≤ k - 1: di and di + 1 are adjacent. Also, dk and d1 should also be adjacent. Cells x and y are called adjacent if they share an edge.
Since Gary is colour blind, he wants your help. Your task is to determine if there exists a cycle on the board.

Detailed explanation ( Input/output format, Notes, Images )
Constraints :
2 <= N <= 1000
2 <= M <= 1000
Time Limit: 1 second
Sample Input 1:
3 4
AAAA
ABCA
AAAA
Sample Output 1:
true



bool Validpoint(int i,int j,int n,int m)
{
    if(i>=0 && j>=0 && i<n && j<m)
    {
        return true;
    }
    else
    {
        return false;
    }
}
bool cycle(vector<vector<char>> &board,int visited[1000][1000],int n, int m,char h,int dx,int dy,int fx,int fy,int shr,int countu)
{
   // cout << " "<< dx<<" "<< dy<< " ";
    if(board[dx][dy]!=h)
    {
        return false;
    }
    if(dx==fx && dy==fy && shr==1)
    {
        return true;
    }
    visited[dx][dy]=1;
    vector<vector<int>> qw={{0,1},{0,-1},{1,0},{-1,0}};
    for(int i=0;i<4;i++)
    {
        int rx=dx+qw[i][0];
        int ry=dy+qw[i][1];
         if(rx==fx && ry==fy && shr==1 && countu > 2)
    {
        return true;
    }
        if(Validpoint(rx,ry,n,m) && visited[rx][ry]==0 && cycle(board,visited,n,m,h,rx,ry,fx,fy,1,countu+1))
        {
            return true;
        }
    }
    visited[dx][dy]=0;
    return false;
}

bool hasCycle(vector<vector<char>> &board, int n, int m) {
    // Write your code here.
    int visited[1000][1000]={0};
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<m;j++)
        {
            if(cycle(board,visited,n,m,board[i][j],i,j,i,j,0,0))
            {
                return true;
            }
        }
    }
    return false;
}
