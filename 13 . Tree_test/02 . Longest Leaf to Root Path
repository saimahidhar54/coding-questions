Problem statement
Given a binary tree, return the longest path from leaf to root. Longest means, a path which contain maximum number of nodes from leaf to root.

Detailed explanation ( Input/output format, Notes, Images )
Sample Input 1 :
 5 6 10 2 3 -1 -1 -1 -1 -1 9 -1 -1
Input Graph

Sample Output 1 :
9
3
6
5
Input Graph

// Following is the Binary Tree node structure
/**************
class BinaryTreeNode {
    public : 
    T data;
    BinaryTreeNode<T> *left;
    BinaryTreeNode<T> *right;

    BinaryTreeNode(T data) {
        this -> data = data;
        left = NULL;
        right = NULL;
    }
};
***************/
#include <bits/stdc++.h>
vector<int> findheight(BinaryTreeNode<int>* root,vector<int> v)
{
    if(root==NULL)
    {
        return v;
    }
    vector<int> f1;
    vector<int> f2;

    f1.push_back(root->data);
 f2.push_back(root->data);
    f1=findheight(root->left,f1);
    f2=findheight(root->right,f2);
    if(f1.size()> f2.size())
    {
     for(int i=0;i<f1.size();i++)
     {
         v.push_back(f1[i]);
     }
        return v;
    }
    else
    {
        for(int i=0;i<f2.size();i++)
     {
         v.push_back(f2[i]);
     }
        return v;
    }
}
vector<int> * longestPath(BinaryTreeNode<int>* root) {
	// Write your code here
    vector<int> v;
   vector <int> n= findheight(root,v);
   vector<int> *p = new vector<int>();
   for(int i=0;i<n.size();i++)
   {
       p->push_back(n[n.size()-i-1]);
   }
   return p;
}
