Problem statement
Given 'n' number of words, you need to find if there exist any two words which can be joined to make a palindrome or any word, which itself is a palindrome or not.



Note: The function should return either true or false. You don't have to print anything.
Detailed explanation ( Input/output format, Notes, Images )
Constraints:
0 <= n <= 10^5
Time Limit: 1 sec
Sample Input 1 :
4
abc def ghi cba
Sample Output 1 :
true
Explanation of Sample Input 1:
"abc" and "cba" forms a palindrome
Sample Input 2 :
2
abc def
Sample Output 2 :
false
Explanation of Sample Input 2:
Neither their exists a pair which forms a palindrome, nor any of the words is a palindrome in itself. Hence, the output is 'false.'


class TrieNode {
   public:
    char data;
    TrieNode **children;
    bool isTerminal;
    int childCount;

    TrieNode(char data) {
        this->data = data;
        children = new TrieNode *[26];
        for (int i = 0; i < 26; i++) {
            children[i] = NULL;
        }
        isTerminal = false;
        childCount = 0;
    }
};

class Trie {
    TrieNode *root;

   public:
    int count;

    Trie() {
        this->count = 0;
        root = new TrieNode('\0');
    }

    bool add(TrieNode *root, string word) {
        // Base case
        if (word.size() == 0) {
            if (!root->isTerminal) {
                root->isTerminal = true;
                return true;
            } else {
                return false;
            }
        }

        // Small calculation
        int index = word[0] - 'a';
        TrieNode *child;
        if (root->children[index] != NULL) {
            child = root->children[index];
        } else {
            child = new TrieNode(word[0]);
            root->children[index] = child;
            root->childCount++;
        }

        // Recursive call
        return add(child, word.substr(1));
    }

    void add(string word) {
        if (add(root, word)) {
            this->count++;
        }
    }

    /*..................... Palindrome Pair................... */
    bool sarchu(TrieNode * root,string s)
    {
        if(s.length()==0)
        {
            return true;
        }
        int index= s[0]-'a';
        if(root->children[index]!=NULL)
        {
            return sarchu(root->children[index],s.substr(1));
        }
        else
        {
            return false;
        }

    }
    bool isPalindromePair(vector<string> words) {
        // Write your code here
        for(int i=0;i<words.size();i++)
        {
            for(int j=0;j<words[i].length();j++)
            {
                if(sarchu(root,words[i].substr(j))==false)
                {
                    add(words[i].substr(j));
                }
            }
        }
        for(int i=0;i<words.size();i++)
        {
            string v;
            for(int j=words[i].length()-1;j>=0;j--)
            {
                v=v+words[i][j];
            }
            if(sarchu(root,v)==true)
            {
                return true;
            }
        }
        return false;
    }
};
