Problem statement
Given an undirected, connected and weighted graph G(V, E) with V number of vertices (which are numbered from 0 to V-1) and E number of edges.



Find and print the Minimum Spanning Tree (MST) using Prim's algorithm.



For printing MST follow the steps -

1. In one line, print an edge which is part of MST in the format - 
v1 v2 w
where, v1 and v2 are the vertices of the edge which is included in MST and whose weight is w. And v1  <= v2 i.e. print the smaller vertex first while printing an edge.
2. Print V-1 edges in above format in different lines.
Note: Order of different edges doesn't matter.
Detailed explanation ( Input/output format, Notes, Images )
Constraints :
2 <= V, E <= 10^5
1 <= Wi <= 10^5
Time Limit: 1 sec
Sample Input 1 :
4 4
0 1 3
0 3 5
1 2 1
2 3 8
Input Graph



Sample Output 1 :
0 1 3
1 2 1
0 3 5
Input Graph




#include <bits/stdc++.h>
using namespace std;

int main() {
    // Write your code here
    int v,e,j,k,m;
    cin >> v>> e;
    if(v!=0)
    {
    int **arr=new int*[v];
    for(int i=0;i<v;i++)
    {
        arr[i]=new int[v];
        for(int j=0;j<v;j++)
        {
            arr[i][j]=0;
        }
    }

    for(int i=0;i<e;i++)
    {
        cin >> j>>k>> m;
        arr[k][j]= m;
        arr[j][k]=m;
    }
    bool *visited=new bool[v];
    int *weight=new int[v];
    int *parent=new int[v];
    for(int i=0;i<v;i++)
    {
        visited[i]=false;
        weight[i]=10002;
        //parent[i]=-1;
    }
    weight[0]=0;
    //cout << arr[2][3];
    int count=0;
    while(count<v)
    {
        int mini=100003;
        int index=-6;
        for(int i=0;i<v;i++)
        {
            if(weight[i] < mini && visited[i]==0)
            {
                mini=weight[i];
                index=i;
            }
        }
        visited[index]=1;
        for(int j=0;j<v;j++)
        {
            if(visited[j]==0 && arr[index][j]!=0 && arr[index][j]< weight[j])
            {
                parent[j]=index;
                weight[j]=arr[index][j];
            }
        }
        count++;
    }
    
    for(int i=1;i<v;i++)
    {
        if(parent[i] < i)
        {
            cout << parent[i] <<" "<< i<<" "<< weight[i]<< endl;
        }
        else
        {
        cout << i <<" "<< parent[i] <<" "<< weight[i]<<endl;
        }
    }
    }

}
