Problem statement
Given an undirected, connected and weighted graph G(V, E) with V number of vertices (which are numbered from 0 to V-1) and E number of edges.

Find and print the shortest distance from the source vertex (i.e. Vertex 0) to all other vertices (including source vertex also) using Dijkstra's Algorithm.

Detailed explanation ( Input/output format, Notes, Images )
Constraints :
2 <= V, E <= 10^5
Time Limit: 1 sec
Sample Input 1 :
4 4
0 1 3
0 3 5
1 2 1
2 3 8
Input Graph

Sample Output 1 :
0 0
1 3
2 4
3 5


Input Graph



#include <bits/stdc++.h>
using namespace std;

int main() {
    // Write your code here
    int v,e,j,k,l;
    cin >> v >> e;
    int **arr=new int*[v];
    for(int i=0;i<v;i++)
    { 
        arr[i]=new int[v];
        for(int j=0;j<v;j++)
        {
            arr[i][j]=0;
        }
    }
    for(int i=0;i<e;i++)
    {
        cin >> j >> k >> l;
        arr[j][k]=l;
        arr[k][j]=l;
    }
    int *weight=new int[v];
    int *visited=new int[v];
    for(int i=0;i<v;i++)
    {
        weight[i]=INT_MAX;
        visited[i]=0;
    }
    weight[0]=0;
    int k1=0;
    while(k1<(v))
    {
        int mini=INT_MAX;
        int index=-6;
    for(int i=0;i<v;i++)
    {
        if(weight[i]<mini && visited[i]==0)
        {
            mini=weight[i];
            index=i;
        }
    }
    visited[index]=1;
    for(int i=0;i<v;i++)
    {
        if(visited[i]==0 && arr[index][i]!=0 && (arr[index][i]+weight[index])<weight[i])
        {
            weight[i]=(arr[index][i]+weight[index]);
        }
    }
    k1++;
    }
    for(int i=0;i<v;i++)
    {
        cout << i <<" "<< weight[i]<< endl;
    }
}
