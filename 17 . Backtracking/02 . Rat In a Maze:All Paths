Problem statement
You are given an integer N and a binary 2D array of size N*N. The given binary matrix represents a maze and a rat starts from the top left cell and has to reach to the bottom right cell of the maze. The rat can move in all the four directions: up, down, left and right.

In the given binary matrix, 0 signifies the cell is a dead end and 1 signifies the cell can be used to move from source to destination cell.

You have to print all the paths, following which rat can move from the top left cell to the bottom right cell of the given binary matrix.

Detailed explanation ( Input/output format, Notes, Images )
Constraints
1 <= N <= 18
0 <= Number of cells with value 1 <= 15
Time Limit: 1 second
Sample Input 1 :
3
1 0 1
1 0 1
1 1 1
Sample Output 1 :
1 0 0 1 0 0 1 1 1 
Explanation :
Only 1 path is possible. The path is shown in the image below.
Alt Text

Sample Input 2 :
3
1 0 1
1 1 1
1 1 1
Sample Output 2 :
1 0 0 1 1 1 1 1 1 
1 0 0 1 0 0 1 1 1 
1 0 0 1 1 0 0 1 1 
1 0 0 1 1 1 0 0 1 
Explanation:
 As described in the Sample Output 2, four paths are possible.



/*
	Note:
	To get all the test cases accepted, make recursive calls in following order: Top, Down, Left, Right.
	This means that if the current cell is (x, y), then order of calls should be: top cell (x-1, y), 
	down cell (x+1, y), left cell (x, y-1) and right cell (x, y+1).
*/
#include<bits/stdc++.h>
using namespace std;
void rat(int maze[18][18],int solu[18][18],int i,int j,int size,int origin)
{
	if(i==(size-1) && j==(size-1))
	{
		solu[i][j]=1;
		for(int i=0;i<size;i++)
	{
		for(int j=0;j<size;j++)
		{
			cout << solu[i][j]<< " ";
		}
	}
	cout << endl;
	solu[i][j]=0;
	return;
	}
	if(maze[i][j]==0 || solu[i][j]==1)
	{
		return;
	}
	solu[i][j]=1;
	if(origin==5)
	{
		if((i+1)<size)
		{rat(maze,solu,i+1,j,size,6);}
if((j+1)<size)
		{rat(maze,solu,i,j+1,size,5);}
if((i-1)>=0)
	{	rat(maze,solu,i-1,j,size,8);
	}
	}
else	if(origin==6)
	{
		if((i+1)<size)
		{rat(maze,solu,i+1,j,size,6);}
if((j+1)<size)
		{rat(maze,solu,i,j+1,size,5);}
	if((j-1)>=0)
	{
		rat(maze,solu,i,j-1,size,7);
	}
	}
else if(origin==7)
	{
		if((i+1)<size)
		{rat(maze,solu,i+1,j,size,6);}
if((i-1)>=0)
	{	rat(maze,solu,i-1,j,size,8);
	}
	if((j-1)>=0)
	{
		rat(maze,solu,i,j-1,size,7);
	}
	}
else if(origin==8)
	{
if((j+1)<size)
		{rat(maze,solu,i,j+1,size,5);}
if((i-1)>=0)
	{	rat(maze,solu,i-1,j,size,8);
	}
	if((j-1)>=0)
	{
		rat(maze,solu,i,j-1,size,7);
	}
	}
	solu[i][j]=0;
	return;

}
int main() {
	int n;
	cin >> n;
	int maze[18][18];
	int solu[18][18]={0};
	for(int i=0;i<n;i++)
	{
		for(int j=0;j<n;j++)
		{
			cin >> maze[i][j];
		}
	}
	rat(maze,solu,0,0,n,5);
	// Write your code here

	return 0;
}
