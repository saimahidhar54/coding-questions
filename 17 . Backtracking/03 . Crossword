Problem statement
Coding Ninjas has provided you a crossword of 10*10 grid. The grid contains '+' or '-' as its cell values. Now, you are also provided with a word list that needs to placed accurately in the grid. Cells marked with '-' are to be filled with word list.

For example, The following is an example for the input crossword grid and the word list.

+-++++++++
+-++-+++++
+-------++
+-++-+++++
+-++-+++++
+-++-+++++
++++-+++++
++++-+++++
++++++++++
----------
CALIFORNIA;NIGERIA;CANADA;TELAVIV
Output for the given input should be:

+C++++++++
+A++T+++++
+NIGERIA++
+A++L+++++
+D++A+++++
+A++V+++++
++++I+++++
++++V+++++
++++++++++
CALIFORNIA
Note: We have provided such test cases that there is only one solution for the given input.

Detailed explanation ( Input/output format, Notes, Images )
Constraints
The number of words in the word list lie in the range of: [1,6]
The length of words in the word list lie in the range: [1, 10]
Time Limit: 1 second
Sample Input 1:
+-++++++++
+-++-+++++
+-------++
+-++-+++++
+-++-+++++
+-++-+++++
++++-+++++
++++-+++++
++++++++++
----------
CALIFORNIA;NIGERIA;CANADA;TELAVIV
Sample Output 1:
+C++++++++
+A++T+++++
+NIGERIA++
+A++L+++++
+D++A+++++
+A++V+++++
++++I+++++
++++V+++++
++++++++++
CALIFORNIA



#include<bits/stdc++.h>
using namespace std;
bool isValidVertical(char arr[10][10],vector <string> v,int index,int i,int j)
{
    int n=i;
    for(int g=0;g<v[index].length();g++)
    {
        if(j==10 || n==10)
        {
return false;
        }
        if(arr[n][j]=='+' ||( (v[index][g]!=arr[n][j] ) && arr[n][j]!='-'))
        {
            return false;
        }
    n++;
    }
    if(n!=10 && arr[n][j]!='+')
    {
        return false;
    }
    return true;
}
void setVertical(char arr[10][10],vector <string> v,int index,int shr[10],int i,int j)
{
    int n=i;

    for(int g=0;g<v[index].length();g++)
    {
        if(arr[n][j]=='-')
        {
            arr[n][j]=v[index][g];
            shr[g]=5;
        }

        n++;

    }
}
void resetVertical(char arr[10][10],vector <string> v,int index,int shr[10],int i,int j)
{
    int n=i;
    for(int g=0;g<v[index].length();g++)
    {
        if(shr[g]==5)
        {
            arr[n][j]='-';
        }
        n++;
    }
}
bool isValidHorizontal(char arr[10][10],vector <string> v,int index,int i,int j)
{
    int n=j;
    for(int g=0;g<v[index].length();g++)
    {
        if(i==10 || n==10)
        {
return false;
        }
        if(arr[i][n]=='+' ||( (v[index][g]!=arr[i][n] ) && arr[i][n]!='-'))
        {
            return false;
        }
    n++;
    }
    if(n!=10 && arr[i][n]!='+')
    {
        return false;
    }
    return true;
}
void setHorizontal(char arr[10][10],vector <string> v,int index,int shr[10],int i,int j)
{
    int n=j;

    for(int g=0;g<v[index].length();g++)
    {
        if(arr[i][n]=='-')
        {
            arr[i][n]=v[index][g];
            shr[g]=5;
        }

        n++;

    }
}
void resetHorizontal(char arr[10][10],vector <string> v,int index,int shr[10],int i,int j)
{
    int n=j;
    for(int g=0;g<v[index].length();g++)
    {
        if(shr[g]==5)
        {
            arr[i][n]='-';
        }
        n++;
    }
}
void solver(char arr[10][10],vector <string> v,int index)
{
    if(index==v.size())
    {
        for(int i=0;i<10;i++)
        {
            for(int j=0;j<10;j++)
            {
                cout << arr[i][j];
            }
            cout << endl;
        }
        return;
    }
    for(int i=0;i<10;i++)
    {
        for(int j=0;j<10;j++)
        {
           if(isValidVertical(arr,v,index,i,j))
           {
               int shr[v[index].length()]={9};
               setVertical(arr,v,index,shr,i,j);
               solver(arr,v,index+1);
               resetVertical(arr,v,index,shr,i,j);
           }
           else if(isValidHorizontal(arr,v,index,i,j))
           {
 int shr[v[index].length()]={9};
               setHorizontal(arr,v,index,shr,i,j);
               solver(arr,v,index+1);
               resetHorizontal(arr,v,index,shr,i,j);
           }
        }
    }
}
int main(){
    
    // write your code here
    char arr[10][10];
    for(int i=0;i<10;i++)
    {
        for(int j=0;j<10;j++)
        {
            cin >> arr[i][j];
        }
    }
    string r;
    cin >> r;
    vector <string> v;
    string k;
   // int shr[6]={0};
    for(int i=0;i<r.length();i++)
    {
        if(r[i]==';')
        {
            v.push_back(k);
            k="";
            continue;
        }

        if(i==(r.length()-1))
        {
            k=k+r[i];
            v.push_back(k);
        }
        k=k+r[i];
    }
   solver(arr,v,0);

    return 0;
}
