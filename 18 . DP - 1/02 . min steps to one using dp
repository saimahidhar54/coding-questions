Problem statement
Given a positive integer 'n', find and return the minimum number of steps that 'n' has to take to get reduced to 1. You can perform any one of the following 3 steps:

1.) Subtract 1 from it. (n = n - ­1) ,
2.) If n is divisible by 2, divide by 2.( if n % 2 == 0, then n = n / 2 ) ,
3.) If n is divisible by 3, divide by 3. (if n % 3 == 0, then n = n / 3 ).  
Detailed explanation ( Input/output format, Notes, Images )
Constraints :
1 <= n <= 10 ^ 6
Time Limit: 1 sec
Sample Input 1 :
4
Sample Output 1 :
2 
Explanation of Sample Output 1 :
For n = 4
Step 1 :  n = 4 / 2  = 2
Step 2 : n = 2 / 2  =  1 
Sample Input 2 :
7
Sample Output 2 :
3
Explanation of Sample Output 2 :
For n = 7
Step 1 :  n = 7 ­- 1 = 6
Step 2 : n = 6  / 3 = 2 
Step 3 : n = 2 / 2 = 1  



/*int cou(int n,int *a)
{
	if(n==1)
	{
		return 0;
	}
	if(a[n]!=-1)
	{
		return a[n];
	}
	int e= cou(n-1,a);
	if(n%2==0)
	{
		int v= cou(n/2,a);
		if(v<e)
		{
			e=v;
		}
	}
	if(n%3==0)
	{
		int x=cou(n/3,a);
		if(x<e)
		{
			e=x;
		}
	}
	a[n]=e+1;
	return e+1;

}*/
#include <climits>
int countStepsToOne(int n) {
  // Write your code here
  int a[n+1];
  for(int i=0;i<=n;i++)
  {
	  a[i]=INT_MAX;
  }
  for (int i = 0; i < (n + 1); i++)
{
	if(i-1 < a[i])
	{
		a[i]=i-1;
	}
	int z=i+1;
	int y=i*2;
	int x=i*3;
	if(z<=n && a[z]>(a[i]+1))
	{
		a[z]=a[i]+1;
	}
        if (y <= n && a[y] > (a[i]+1)) {
          a[y] = a[i]+1;
        }
        if (x <= n && a[x] > (a[i]+1)) {
          a[x] = a[i]+1;
        }
}
return a[n];

      //  cou(n,a);
}
