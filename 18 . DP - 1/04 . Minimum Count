Problem statement
Given an integer N, find and return the count of minimum numbers required to represent N as a sum of squares.

That is, if N is 4, then we can represent it as : {1^2 + 1^2 + 1^2 + 1^2} and {2^2}. The output will be 1, as 1 is the minimum count of numbers required to represent N as sum of squares.

Detailed explanation ( Input/output format, Notes, Images )
Constraints :
0 <= n <= 10 ^ 4

Time Limit: 1 sec
Sample Input 1 :
12
Sample Output 1 :
3
Explanation of Sample Output 1 :
12 can be represented as : 
A) (1^2) + (1^2) + (1^2) + (1^2) + (1^2) + (1^2) + (1^2) + (1^2) + (1^2) + (1^2) + (1^2) + (1^2)

B) (1^2) + (1^2) + (1^2) + (1^2) + (1^2) + (1^2) + (1^2) + (1^2)  + (2 ^ 2)

C) (1^2) + (1^2) + (1^2) + (1^2) + (2 ^ 2) + (2 ^ 2)

D) (2 ^ 2) + (2 ^ 2) + (2 ^ 2)

As we can see, the output should be 3.
Sample Input 2 :
9
Sample Output 2 :
1




int minhelp(int n,int a[10000])
{
	if(n==0 || n==1)
	{
		return n;
	}
	if(a[n]!=-1)
	{
		return a[n];
	}
	int y=sqrt(n),b,minii=INT_MAX;
	for(int i=1;i<=y;i++)
	{
		b=minhelp(n-(i*i),a);
                if (b < minii) {
                  minii = b;
                }
        }
		a[n]=minii+1;
		return a[n];
}
int minCount(int n)
{
	//Write your code here
	/*if(n==0)
	{
		return 0;
	}
	if(n==1)
	{
		return 1;
	}
	int y=sqrt(n),b,minii=INT_MAX;
	//cout << y << " "<< minii << " ";
	for(int i=1;i<=y;i++)
	{
	b=	minCount(n-(i*i));
	if(b<minii)
	{
		minii=b;
	}

	}
	//cout << minii;
	return minii+1;
	*/

	int a[10000]={0,1};
	for(int i=0;i<=n;i++)
	{
	/*	if(i==0)
		{
                  int z = i + 1 * 1;
                  int t = 1;
                  while (z <= n) {
                    if (a[z] > (a[i] + t) || a[z] == 0) {
                      a[z] = a[i] + t;
                    }
                    t++;
                    z = i + (t * t);
                  }
                }
				*/
		int z=i+1*1;
		int t=1;
		while(z<=n)
		{
                  if (a[z] > (a[i] + 1) || a[z] == 0) {
                    a[z] = a[i] + 1;
                  }
                    t++;
                    z = i + (t * t);
                }
	}
	return a[n];
	//return minhelp(n,a);
}
