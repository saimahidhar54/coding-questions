Return subsets sum to K
Send Feedback
Given an array A of size n and an integer K, return all subsets of A which sum to K.
Subsets are of length varying from 0 to n, that contain elements of the array. But the order of elements should remain same as in the input array.


Note : The order of subsets are not important.


Input format :
Line 1 : Integer n, Size of input array
Line 2 : Array elements separated by space
Line 3 : K 
Constraints :
1 <= n <= 20
Sample Input :
9 
5 12 3 17 1 18 15 3 17 
6
Sample Output :
3 3
5 1



int subsetSumToK(int input[], int n, int output[][50], int k) {
    // Write your code here
    int o1[1000][50],o2[1000][50];
    int size =0;
    if(k<0 || (n==0 && k!=0))
    {
        return 0;
    }
    int sum =0;
    for(int i=0;i<n;i++)
    {
        sum = sum + input[i];
    }
    if(sum==k)
    {
        for(int i=0;i<n;i++)
        {
            output[0][i+1]=input[i];
        }
        output[0][0]=n;
        return 1;
    }
    else if(sum < k)
    {
        return 0;
    }
    else
    {
    int size1=subsetSumToK(input+1,n-1,o1,k-input[0]);
    for(int p=0;p<size1;p++)
    {
        for (int i=1;i<=o1[p][0];i++)
        {
            output[p][i+1]=o1[p][i];
        }
    	output[p][0]=o1[p][0]+1;
        output[p][1]=input[0];
    }
    int size2=subsetSumToK(input+1,n-1,o2,k);
    for(int i=size1;i<(size1+size2);i++)
    {
        for(int j=0;j<(o2[i-size1][0]+1);j++)
        {
        output[i][j]=o2[i-size1][j];
            }
    }
    return size= size1+size2;
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
}
