Problem statement
Given an array with N elements, you need to find the length of the longest subsequence in the given array such that all elements of the subsequence are sorted in strictly increasing order.

Detailed explanation ( Input/output format, Notes, Images )
Constraints
1 <= N <= 10^3
Time Limit: 1 second
Sample Input 1 :
6
5 4 11 1 16 8
Sample Output 1 :
3
Sample Output Explanation
Length of longest subsequence is 3 i.e. (5,11,16) or (4,11,16).
Sample Input 2 :
3
1 2 2
Sample Output 2 :
2


#include <climits>
int xd(int * arr,int n,int x)
{
	if(n==0)
	{
		return 0;
	}
	if(arr[0]>x)
	{
		return max(1+xd(arr+1,n-1,arr[0]),xd(arr+1,n-1,x));
	}
	else
	{
		return xd(arr+1,n-1,x);
	}
}
int longestIncreasingSubsequence(int* arr, int n) {
	// Write your code here
	int **k=new int*[n+1];
	int gh=INT_MIN;
	for(int i=0;i<n;i++)
	{
		if(arr[i]>gh)
		{
			gh=arr[i];
		}
	}
	for(int i=0;i<(n+1);i++)
	{
		k[i]=new int[gh+1];
	}
	for(int j=0;j<=gh;j++)
	{
		k[n][j]=0;
	}
	for(int i=n-1;i>=0;i--)
	{
		for(int j=0;j<=gh;j++)
		{
			if(arr[i]>j)
			{
				k[i][j]= max(1+k[i+1][arr[i]],k[i+1][j]);
			}
			else
			{
				k[i][j]=k[i+1][j];
			}
		}
	}
	/*for(int i=0;i<=n;i++)
	{
		for(int j=0;j<=gh;j++)
		{
			cout << k[i][j]<<" ";

		}
		cout << endl;
	}*/
	return k[0][0];
	//return xd(arr,n,INT_MIN);
}
